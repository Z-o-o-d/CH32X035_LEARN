///********************************** (C) COPYRIGHT *******************************
// * File Name          : main.c
// * Author             : WCH
// * Version            : V1.0.0
// * Date               : 2023/12/26
// * Description        : Main program body.
//*********************************************************************************
//* Copyright (c) 2021 Nanjing Qinheng Microelectronics Co., Ltd.
//* Attention: This software (modified or not) and binary are used for
//* microcontroller manufactured by Nanjing Qinheng Microelectronics.
//*******************************************************************************/
//
///*
// *@Note
// *GPIO routine:
// *PA0 push-pull output.
// *
// ***Only PA0--PA15 and PC16--PC17 support input pull-down.
// */
//
//#include "debug.h"
//
///* Global define */
//
///* Global Variable */
//
///*********************************************************************
// * @fn      GPIO_Toggle_INIT
// *
// * @brief   Initializes GPIOA.0
// *
// * @return  none
// */
//void GPIO_Toggle_INIT(u16 arr, u16 psc, u16 ccp)
//{
//    GPIO_InitTypeDef GPIO_InitStructure={0};
//    TIM_OCInitTypeDef TIM_OCInitStructure={0};
//    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure={0};
//
//
//
//    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_AFIO, ENABLE);
//
//    GPIO_PinRemapConfig(GPIO_FullRemap_TIM3, ENABLE);
//
//    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_3|GPIO_Pin_4;
//    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
//    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
//    GPIO_Init(GPIOA, &GPIO_InitStructure);
//
//
//
//    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
//    TIM_TimeBaseInitStructure.TIM_Period = arr;
//    TIM_TimeBaseInitStructure.TIM_Prescaler = psc;
//    TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
//    TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
//    TIM_TimeBaseInit( TIM3, &TIM_TimeBaseInitStructure);
//
//    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
//    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
//    TIM_OCInitStructure.TIM_Pulse = ccp;
//    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
//    TIM_OC1Init( TIM3, &TIM_OCInitStructure );
//    TIM_OC2Init( TIM3, &TIM_OCInitStructure );
//
//
//    TIM_CtrlPWMOutputs(TIM3, ENABLE );
//    TIM_OC1PreloadConfig( TIM3, TIM_OCPreload_Disable );
//    TIM_OC2PreloadConfig( TIM3, TIM_OCPreload_Disable );
//
//    TIM_ARRPreloadConfig( TIM3, ENABLE );
//    TIM_Cmd( TIM3, ENABLE );
//
//}
//
//
//void PWM_WRITE(u16 ccp)
//{
//    TIM_OCInitTypeDef TIM_OCInitStructure={0};
//
//    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
//    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
//    TIM_OCInitStructure.TIM_Pulse = ccp;
//    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
//    TIM_OC1Init( TIM3, &TIM_OCInitStructure );
//
//    TIM_CtrlPWMOutputs(TIM3, ENABLE );
//    TIM_OC1PreloadConfig( TIM3, TIM_OCPreload_Disable );
//    TIM_ARRPreloadConfig( TIM3, ENABLE );
//    TIM_Cmd( TIM3, ENABLE );
//
//}
//
//
///*********************************************************************
// * @fn      main
// *
// * @brief   Main program.
// *
// * @return  none
// */
//int main(void)
//{
//    u8 i = 0;
//
//    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
//    SystemCoreClockUpdate();
//    Delay_Init();
//    USART_Printf_Init(115200);
//    printf("SystemClk:%d\r\n", SystemCoreClock);
//    printf( "ChipID:%08x\r\n", DBGMCU_GetCHIPID() );
//    printf("GPIO Toggle TEST\r\n");
//    GPIO_Toggle_INIT( 10, 0, 4 );
//
//
//
//
//    while(1)
//    {
//        PWM_WRITE(20);
//        Delay_Ms(10);
//        PWM_WRITE(40);
//        Delay_Ms(10);
//        PWM_WRITE(0);
//        Delay_Ms(10);
////        GPIO_WriteBit(GPIOA, GPIO_Pin_6, (i == 0) ? (i = Bit_SET) : (i = Bit_RESET));
//    }
//}


















/********************************** (C) COPYRIGHT *******************************
 * File Name          : main.c
 * Author             : WCH
 * Version            : V1.0.0
 * Date               : 2023/12/26
 * Description        : Main program body.
 *********************************************************************************
 * Copyright (c) 2021 Nanjing Qinheng Microelectronics Co., Ltd.
 * Attention: This software (modified or not) and binary are used for
 * microcontroller manufactured by Nanjing Qinheng Microelectronics.
 *******************************************************************************/

/*
 *@Note
 *OPA2 is used as a voltage follower output, the external voltage
 *is output to OPA1, and the ADC samples OPA1
 *OPA2_CHP0--PA7
 *OPA2_CHN1--PA5
 *OPA2_OUT--PA4
 *
 *In this example, PA5 and PA4 are short-circuited, and the external voltage is input from PA7.
 *If the negative feedback is connected to a resistor, it can also form an operational amplifier.
 */

#include "debug.h"
#include "ch32x035_opa.h"

/*********************************************************************
 * @fn      OPA2_Init
 *
 * @brief   Initializes OPA2.
 *
 * @return  none
 */
void OPA2_Init( void )
{
    GPIO_InitTypeDef GPIO_InitStructure = {0};
    OPA_InitTypeDef  OPA_InitStructure = {0};

    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA, ENABLE );
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init( GPIOA, &GPIO_InitStructure );

    OPA_InitStructure.OPA_NUM=OPA2;
    OPA_InitStructure.PSEL = CHP0;
    OPA_InitStructure.NSEL = CHN_PGA_4xIN;
    OPA_InitStructure.Mode=OUT_IO_OUT0;
    OPA_InitStructure.FB=FB_ON;
    OPA_Init( &OPA_InitStructure );
    OPA_Cmd(OPA2, ENABLE );
}

void OPA2_Change( OPA_NSEL_TypeDef inputChannel)
{
    OPA_InitTypeDef  OPA_InitStructure = {0};
    OPA_InitStructure.OPA_NUM=OPA2;
    OPA_InitStructure.PSEL = CHP0;
    OPA_InitStructure.NSEL = inputChannel;
    OPA_InitStructure.Mode=OUT_IO_OUT0;
    OPA_InitStructure.FB=FB_ON;
    OPA_Init( &OPA_InitStructure );
    OPA_Cmd(OPA2, ENABLE );
}


/*********************************************************************
 * @fn      ADC_Function_Init
 *
 * @brief   Initializes ADC collection.
 *
 * @return  none
 */
void ADC_Function_Init(void)
{
    ADC_InitTypeDef  ADC_InitStructure = {0};
    GPIO_InitTypeDef GPIO_InitStructure = {0};

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    ADC_DeInit(ADC1);

    ADC_CLKConfig(ADC1, ADC_CLK_Div6);

    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    ADC_InitStructure.ADC_ScanConvMode = DISABLE;
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    ADC_InitStructure.ADC_NbrOfChannel = 1;
    ADC_Init(ADC1, &ADC_InitStructure);

    ADC_Cmd(ADC1, ENABLE);
}

/*********************************************************************
 * @fn      Get_ADC_Val
 *
 * @brief   Returns ADCx conversion result data.
 *
 * @param   ch - ADC channel.
 *            ADC_Channel_0 - ADC Channel0 selected.
 *            ADC_Channel_1 - ADC Channel1 selected.
 *            ADC_Channel_2 - ADC Channel2 selected.
 *            ADC_Channel_3 - ADC Channel3 selected.
 *            ADC_Channel_4 - ADC Channel4 selected.
 *            ADC_Channel_5 - ADC Channel5 selected.
 *            ADC_Channel_6 - ADC Channel6 selected.
 *            ADC_Channel_7 - ADC Channel7 selected.
 *            ADC_Channel_8 - ADC Channel8 selected.
 *            ADC_Channel_9 - ADC Channel9 selected.
 *            ADC_Channel_10 - ADC Channel10 selected.
 *            ADC_Channel_11 - ADC Channel11 selected.
 *            ADC_Channel_12 - ADC Channel12 selected.
 *            ADC_Channel_13 - ADC Channel13 selected.
 *            ADC_Channel_14 - ADC Channel14 selected.
 *            ADC_Channel_15 - ADC Channel15 selected.
 *
 * @return  none
 */
u16 Get_ADC_Val(u8 ch)
{
    u16 val;

    ADC_RegularChannelConfig(ADC1, ch, 1, ADC_SampleTime_11Cycles);
    ADC_SoftwareStartConvCmd(ADC1, ENABLE);

    while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));
    val = ADC_GetConversionValue(ADC1);

    return val;
}


/*********************************************************************
 * @fn      main
 *
 * @brief   Main program.
 *
 * @return  none
 */
int main(void)
{
    u16 ADC_val;

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
    SystemCoreClockUpdate();
    Delay_Init();
    USART_Printf_Init(115200);
    printf("SystemClk:%d\r\n", SystemCoreClock);
    printf( "ChipID:%08x\r\n", DBGMCU_GetCHIPID() );
    OPA_Unlock();
    OPA2_Init();
    ADC_Function_Init();
    while(1)
    {   for (int i = 0; i < 10; ++i) {
        ADC_val=Get_ADC_Val(ADC_Channel_4);
        printf("ADC_val:  %04d\r\n",ADC_val);
        Delay_Ms(1);
        }
        OPA2_Change(CHN_PGA_4xIN);
        OPA2_Change(CHN_PGA_8xIN);
        OPA2_Change(CHN_PGA_16xIN);
        OPA2_Change(CHN_PGA_32xIN);
    }

}



